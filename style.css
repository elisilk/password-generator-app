@font-face {
  font-family: "JetBrains Mono";
  font-style: normal;
  font-weight: 400;
  src: url(assets/fonts/JetBrainsMono-VariableFont_wght.ttf) format("truetype");
}

@font-face {
  font-family: "JetBrains Mono";
  font-style: normal;
  font-weight: 700;
  src: url(assets/fonts/JetBrainsMono-VariableFont_wght.ttf) format("truetype");
}

:root {
  /* Fonts */
  --ff-sans: "JetBrains Mono", sans-serif;

  --fw-normal: 400;
  --fw-bold: 700;

  /* Colors */

  --clr-neutral-100: hsl(252, 11%, 91%); /* #E6E5EA - Almost White */
  --clr-neutral-400: hsl(252, 9%, 53%); /* #817D92 - Grey */
  --clr-neutral-700: hsl(247, 11%, 15%); /* #24232C - Dark Grey */
  --clr-neutral-900: hsl(248, 15%, 11%); /* #18171F - Very Dark Grey */

  --clr-bkg-gradient: linear-gradient(#14131b, #08070b);

  --clr-red: hsl(0, 90%, 63%); /* #F64A4A - Red */
  --clr-orange: hsl(13, 96%, 67%); /* #FB7C58 - Orange */
  --clr-yellow: hsl(42, 91%, 69%); /* #F8CD65 - Yellow */
  --clr-green: hsl(127, 100%, 82%); /* #A4FFAF - Neon Green */

  /* Fluid calculations - 384px (24rem) -> 572px (35.75rem) */
  /* Calculator: https://royalfig.github.io/fluid-typography-calculator/ */

  /* Fluid typography */
  --fs-400: clamp(
    1rem,
    0.7446808510638299rem + 1.0638297872340425vw,
    1.125rem
  ); /* 16px -> 18px */
  --fs-500: clamp(
    1rem,
    -0.02127659574468077rem + 4.25531914893617vw,
    1.5rem
  ); /* 16px -> 24px */
  --fs-600: clamp(
    1.125rem,
    0.35904255319148937rem + 3.1914893617021276vw,
    1.5rem
  ); /* 18px -> 24px */
  --fs-700: 2rem;
  --fs-800: clamp(
    1.5rem,
    0.47872340425531923rem + 4.25531914893617vw,
    2rem
  ); /* 24px -> 32px */

  /* Fluid spacing */
  --sp-main-padding-inline: clamp(
    1rem,
    -1.0425531914893615rem + 8.51063829787234vw,
    2rem
  ); /* 16px -> 32px */
  --sp-main-padding-block: clamp(
    1rem,
    0.6170212765957447rem + 1.5957446808510638vw,
    1.1875rem
  ); /* 16px -> 19px */
  --sp-body-gap: clamp(
    1rem,
    -0.9148936170212767rem + 7.9787234042553195vw,
    1.9375rem
  ); /* 16px -> 31px */
  --sp-checkbox-list-gap: clamp(
    1rem,
    0.4893617021276596rem + 2.127659574468085vw,
    1.25rem
  ); /* 16px -> 31px */
  --sp-checkbox-item-gap: clamp(
    1.25rem,
    0.7393617021276596rem + 2.127659574468085vw,
    1.5rem
  ); /* 20px -> 24px */
  --copy-icon-height: clamp(
    1.25rem,
    0.7393617021276596rem + 2.127659574468085vw,
    1.5rem
  ); /* 20px -> 24px */
}

/* Resets */

*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

svg,
img {
  display: block;
}

/* Global styling */

body {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;

  font-family: var(--ff-sans);
  font-weight: var(--fw-bold);

  color: var(--clr-neutral-100);
  background: var(--clr-bkg-gradient);
}

/* Components styling */

.container {
  width: 100%;
  min-width: 20rem; /* 320px - 2rem */
  max-width: 35.75rem; /* 540px + 2rem */
  padding-inline: 1rem;
  padding-block: 1rem;
  margin-inline: auto;

  display: grid;
  gap: var(--sp-body-gap); /* 16px -> 31px */
}

.header {
  text-align: center;
}

.title {
  font-size: var(--fs-500);
  color: var(--clr-neutral-400);
}

.main {
  display: grid;
  gap: 1rem;

  font-size: var(--fs-400);
}

.main > * {
  background-color: var(--clr-neutral-700);
  padding-block: var(--sp-main-padding-block);
  padding-inline: var(--sp-main-padding-inline);
}

/* Form reset */

input {
  appearance: none;
}

/* Form components */

.form {
  display: grid;
  gap: 2rem;
}

/* Output */

.output {
  position: relative;
}

.output-text {
  width: 100%;
  border: none;
  color: var(--clr-neutral-100);
  background-color: transparent;
  font-family: inherit;
  font-weight: inherit;
  font-size: var(--fs-800);
}

.output-copy-icon {
  position: absolute;
  top: 50%;
  right: var(--sp-main-padding-inline);
  transform: translateY(-50%);
  appearance: none;
  border: none;
  background: transparent;
  cursor: pointer;
}

.output-copy-success {
  visibility: hidden;
  position: absolute;
  top: 50%;
  right: var(--sp-main-padding-inline);
  transform: translateX(calc((-1 * var(--copy-icon-height) * 21 / 24) - 1rem))
    translateY(-50%);
  color: var(--clr-green);
  text-transform: uppercase;
}

.output-copy-icon svg {
  fill: var(--clr-green);
  aspect-ratio: 21 / 24;
  height: var(--copy-icon-height); /* 20px -> 24px */
}

.output-copy-icon svg:hover {
  fill: var(--clr-neutral-100);
}

/* Inputs */

/* Range */

.range-container {
  display: grid;
  grid-template-columns: auto 1fr;
  align-items: center;
  gap: 1rem;
}

#character-length-output {
  text-align: end;
  font-size: var(--fs-800);
  color: var(--clr-green);
}

.range-slider {
  grid-column: span 2;
  /* background: var(--clr-green);
  height: 0.5rem;
  padding: 0;
  outline: 1px solid transparent; */
}

/* Range */

input[type="range"] {
  appearance: none;
  -webkit-appearance: none;
  width: 100%;
  height: 28px;
  background-color: transparent;

  /* margin: 10px 0; */
}

input[type="range"]:focus {
  outline: none;
}

/* Range - Thumb */

input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  box-sizing: border-box;
  background-color: var(--clr-neutral-100);
  border: 2px solid var(--clr-neutral-100);
  height: 28px;
  width: 28px;
  border-radius: 50%;
  cursor: pointer;
  margin-top: -10px;
}

input[type="range"]::-moz-range-thumb {
  box-sizing: border-box;
  background-color: var(--clr-neutral-100);
  border: 2px solid var(--clr-neutral-100);
  height: 28px;
  width: 28px;
  border-radius: 50%;
  cursor: pointer;
}

input[type="range"]::-ms-thumb {
  /* should come after -webkit- */
  /* may require different margins */
  box-sizing: border-box;
  background-color: var(--clr-neutral-100);
  border: 2px solid var(--clr-neutral-100);
  height: 28px;
  width: 28px;
  border-radius: 50%;
  cursor: pointer;
}

/* Range - Thumb (hover states) */

input[type="range"]::-webkit-slider-thumb:hover,
input[type="range"]::-webkit-slider-thumb:focus {
  border: 2px solid var(--clr-green);
  background: var(--clr-neutral-900);
}

input[type="range"]::-moz-range-thumb:hover,
input[type="range"]::-moz-range-thumb:focus {
  border: 2px solid var(--clr-green);
  background: var(--clr-neutral-900);
}

input[type="range"]::-ms-thumb:hover,
input[type="range"]::-ms-thumb:focus {
  border: 2px solid var(--clr-green);
  background: var(--clr-neutral-900);
}

/* Range - Track */

input[type="range"]::-webkit-slider-runnable-track {
  width: 100%;
  height: 8px;
  cursor: pointer;
  background-color: var(--clr-green);
}

input[type="range"]::-moz-range-track {
  width: 100%;
  height: 8px;
  cursor: pointer;
  background-color: var(--clr-neutral-900);
}

input[type="range"]::-ms-track {
  /* should come after -webkit- */
  border-color: transparent;
  color: transparent;
  width: 100%;
  height: 8px;
  cursor: pointer;
  background: transparent;
  border-width: 16px 0;
}

/* Range - Track (upper and lower) */

input[type="range"]::-moz-range-progress {
  height: 8px;
  cursor: pointer;
  background-color: var(--clr-green);
}

input[type="range"]::-ms-fill-lower {
  height: 8px;
  cursor: pointer;
  background-color: var(--clr-green);
}

input[type="range"]::-ms-fill-upper {
  height: 8px;
  cursor: pointer;
  background-color: var(--clr-neutral-900);
}

/* Checkboxes */

.checkbox-list {
  display: grid;
  gap: var(--sp-checkbox-list-gap); /* 16px -> 20px */
}

.checkbox-item {
  --checkbox-size: 20px;
  display: flex;
  gap: var(--sp-checkbox-item-gap); /* 20px -> 24px */
}

.checkbox-item input[type="checkbox"] {
  position: relative;
  width: var(--checkbox-size);
  height: var(--checkbox-size);
  border: 2px solid var(--clr-neutral-100);
  /* Adjusts the position of the checkboxes on the text baseline */
  vertical-align: -2px;
  /* Set here so that Windows' High-Contrast Mode can override */
  color: green;
}

.checkbox-item input[type="checkbox"]::before {
  content: "";
  background-color: var(--clr-green);
  -webkit-mask-image: url("./assets/images/icon-check.svg") cover;
  mask-image: url("./assets/images/icon-check.svg");
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  visibility: hidden;
}

.checkbox-item input[type="checkbox"]:checked::before {
  /* Use `visibility` instead of `display` to avoid recalculating layout */
  visibility: visible;
}

/* Strength eval */

.strength-eval {
  background-color: var(--clr-neutral-900);
  padding: 1rem;
  text-transform: uppercase;

  display: flex;
  justify-content: space-between;
  align-items: center;
}

.strength-eval__label {
  color: var(--clr-neutral-400);
}

.strength-eval__level {
  font-size: var(--fs-600);
  line-height: 1;
  display: flex;
  gap: 0.75rem;
  align-items: center;
}

.strength-eval__icon {
  display: flex;
  gap: 0.5rem;
  align-items: center;
}

.strength-eval__box {
  box-sizing: border-box;
  width: 10px;
  height: 28px;
  border: 2px solid var(--clr-neutral-100);
  background: transparent;
}

.strength-eval__box--red {
  border: none;
  background: var(--clr-red);
}
.strength-eval__box--orange {
  border: none;
  background: var(--clr-orange);
}
.strength-eval__box--yellow {
  border: none;
  background: var(--clr-yellow);
}
.strength-eval__box--green {
  border: none;
  background: var(--clr-green);
}

.strength-eval__level--hide {
  display: none;
}

/* Generate button */

.generate-button {
  text-transform: uppercase;
  font-family: inherit;
  font-weight: inherit;
  font-size: var(--fs-400);
  /* line-height: 1; */
  color: var(--clr-neutral-700);
  border: 2px solid var(--clr-green);
  background-color: var(--clr-green);
  padding-block: 1rem; /* 16px -> 21px */

  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
}

.generate-button span {
  font-family: inherit;
  font-weight: inherit;
  font-size: var(--fs-400);
}

.generate-button svg {
  aspect-ratio: 1;
  height: 0.75rem; /* 12px */
}

/* .generate-button:hover,
.generate-button:focus,
.generate-button:active {
 */
.generate-button:hover {
  fill: var(--clr-green);
  color: var(--clr-green);
  background-color: transparent;
  cursor: pointer;
}
